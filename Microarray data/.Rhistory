d = read.table('signal.txt')
d = read.table('signal.txt')
d = read.table('signal.txt')
d = read.table('~/BS32010/datastructures/signal.txt')
str(d)
plot(d)
d = read.table('~/BS32010/datastructures/result.txt')
str(d)
plot(d)
d = read.table('~/BS32010/datastructures/result.txt')
str(d)
plot(d)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
d = read.table('~/BS32010/datastructures/result_buffer.txt')
str(d)
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
d = read.table('~/BS32010/datastructures/result_buffer.txt')
plot(d)
View(d)
library(shiny);
library(ggplot2);
library(gridExtra);
library(Biostrings);
library(reshape2);
# We use a hash (similar to a Python dictionary) to manage
# data in response to the selected dataset.
library(hash);
# Define server logic required to plot nucleotide frequencies
shinyServer(function(input, output) {
# Expression to generate a plot of nucleotide frequencies.
# This is wrapped in a call to renderPlot so that the output
# type is a plot, and it is reactive to input choice
output$freqPlot = renderPlot({
# Define a hash of genome filenames, for each organism name.
orghash = hash(keys=c("Escherichia coli", "Mycoplasma pneumoniae",
"Mycoplasma genitalium", "Mycobacterium tuberculosis",
"Mycoplasma spp.", "All", "Unknown"),
values = list(list("NC_000913.fna", "NC_002695.fna",
"NC_004431.fna", "NC_010468.fna"),
list("NC_000912.fna", "NC_016807.fna",
"NC_017504.fna", "NC_020076.fna"),
list("NC_018495.fna", "NC_018496.fna",
"NC_018497.fna", "NC_018498.fna"),
list("NC_016934.fna", "NC_017523.fna",
"NC_022350.fna", "NC_000962.fna"),
list("NC_000912.fna", "NC_016807.fna",
"NC_017504.fna", "NC_020076.fna",
"NC_018495.fna", "NC_018496.fna",
"NC_018497.fna", "NC_018498.fna"),
list("NC_000913.fna", "NC_002695.fna",
"NC_004431.fna", "NC_010468.fna",
"NC_000912.fna", "NC_016807.fna",
"NC_017504.fna", "NC_020076.fna",
"NC_018495.fna", "NC_018496.fna",
"NC_018497.fna", "NC_018498.fna",
"NC_016934.fna", "NC_017523.fna",
"NC_022350.fna", "NC_000962.fna"),
list("NC_002695.fna")
));
datadir = "../../data";  # Hardcoded wrt Shiny location for demo
filelist = orghash[[input$orgname]];  # Choose files for dataset
# Create dataframes to collect data
mono <- data.frame(org=character(), ID=character(), GC=list());
di <- data.frame(org=character(), ID=character(), GC=list());
tri <- data.frame(org=character(), ID=character(), GC=list());
tetra <- data.frame(org=character(), ID=character(), GC=list());
# Loop over sequence files for the chosen organism, and calculate frequencies
for(filename in filelist) {
# Read files in one-by-one
contigs <- readDNAStringSet(file.path(datadir, filename));
# Get base composition data, and compile into a single dataframe for each composition type.
monodata = data.frame(org=input$orgname, ID=names(contigs), length=width(contigs),
f=(oligonucleotideFrequency(contigs, 1)/width(contigs)));
mono <- rbind(mono, monodata);
didata = data.frame(org=input$orgname, ID=names(contigs), length=width(contigs),
f=(oligonucleotideFrequency(contigs, 2)/width(contigs)));
di <- rbind(di, didata);
if(input$all_plots == TRUE) {
tridata = data.frame(org=input$orgname, ID=names(contigs), length=width(contigs),
f=(oligonucleotideFrequency(contigs, 3)/width(contigs)));
tri <- rbind(tri, tridata);
tetradata = data.frame(org=input$orgname, ID=names(contigs), length=width(contigs),
f=(oligonucleotideFrequency(contigs, 4)/width(contigs)));
tetra <- rbind(tetra, tetradata);
}
}
# Plot oligonucleotide frequencies as boxplots
# Reorganise (melt) data for plotting
m.mono = melt(mono, id.vars=c("org"), measure.vars=4:7);
m.di <- melt(di, id.vars=c("org"), measure.vars=4:19);
# Generate boxplots
p1 = ggplot(m.mono, aes(x=variable, y=value, fill=variable)) + geom_boxplot(outlier.colour="red") +
guides(fill=FALSE) + scale_fill_brewer() +
labs(title="Chromosome base frequencies", x='Base', y='% content') + facet_wrap(~org, ncol=5);
p2 <- ggplot(m.di, aes(x=variable, y=value, fill=variable)) + geom_boxplot(outlier.colour="red") +
guides(fill=FALSE) +
labs(title="Chromosome dinucleotide frequencies", x='Dinucleotide', y='% content') +
facet_wrap(~org);
if(input$all_plots == TRUE) {
m.tri <- melt(tri, id.vars=c("org"), measure.vars=4:67);
m.tetra <- melt(tetra, id.vars=c("org"), measure.vars=4:259);
p3 <- ggplot(m.tri, aes(x=variable, y=value, fill=variable)) + geom_boxplot(outlier.colour="red") +
guides(fill=FALSE) +
labs(title="Chromosome trinucleotide frequencies", x='Trinucleotide', y='% content') +
facet_wrap(~org, ncol=1) + theme(axis.text.x = element_blank());
p4 <- ggplot(m.tetra, aes(x=variable, y=value, fill=variable)) + geom_boxplot(outlier.colour="red") +
guides(fill=FALSE) +
labs(title="Chromosome tetranucleotide frequencies", x='Tetranucleotide', y='% content') +
facet_wrap(~org, ncol=1) + theme(axis.text.x = element_blank());
}
# Return the gridded ggplots to the UI
if(input$all_plots == TRUE) {
print(grid.arrange(p1, p2, p3, p4, ncol=1));
} else {
print(grid.arrange(p1, p2, ncol=1));
}
}, height=800)
});
ibrary(shiny);
# Define UI for dataset choice and nucleotide frequency views
shinyUI(pageWithSidebar(
# Application title
headerPanel("Nucleotide Frequency Plots"),
# Sidebar with activity instructions, and controls to select dataset
sidebarPanel(
# Activity instructions as Paragraph elements
p("This interactive example allows you to visualise and compare
mono- and dinucleotide plots for a small set of bacterial genomes."),
p("Use the drop-down box below to select one of the example organisms,
all Mycoplasma species, or the whole example set."),
p("Q1: Which genomes are GC-rich, and which are AT-rich?"),
p("Q2: Compare the plots for individual Mycoplasma species to those for both
Mycoplasma species. What are the differences?"),
p("Q3: Compare the plots for all genome sets, to the individual species plots.
What are the differences?"),
p("Q4: Compare the plot for the 'Unknown' genome to those of the other
genomes. To which species does it most likely belong?"),
# Dataset chosen by a dropdown selection box
selectInput("orgname", "Choose a dataset to load:",
choices = c("Escherichia coli", "Mycoplasma pneumoniae",
"Mycoplasma genitalium", "Mycobacterium tuberculosis",
"Mycoplasma spp.", "All", "Unknown")),
# Draw all plots (on slow machines, probably don't want to...)
checkboxInput(inputId = "all_plots",
label = strong("Draw 3-mer and 4-mer plots (slower...)"),
value = FALSE)
),
# Show plot of the mono-, di- and tri-nucleotide frequencies
# of the selected dataset in the main panel.
mainPanel(
plotOutput("freqPlot")
)
));
library(shiny);
# Define UI for dataset choice and nucleotide frequency views
shinyUI(pageWithSidebar(
# Application title
headerPanel("Nucleotide Frequency Plots"),
# Sidebar with activity instructions, and controls to select dataset
sidebarPanel(
# Activity instructions as Paragraph elements
p("This interactive example allows you to visualise and compare
mono- and dinucleotide plots for a small set of bacterial genomes."),
p("Use the drop-down box below to select one of the example organisms,
all Mycoplasma species, or the whole example set."),
p("Q1: Which genomes are GC-rich, and which are AT-rich?"),
p("Q2: Compare the plots for individual Mycoplasma species to those for both
Mycoplasma species. What are the differences?"),
p("Q3: Compare the plots for all genome sets, to the individual species plots.
What are the differences?"),
p("Q4: Compare the plot for the 'Unknown' genome to those of the other
genomes. To which species does it most likely belong?"),
# Dataset chosen by a dropdown selection box
selectInput("orgname", "Choose a dataset to load:",
choices = c("Escherichia coli", "Mycoplasma pneumoniae",
"Mycoplasma genitalium", "Mycobacterium tuberculosis",
"Mycoplasma spp.", "All", "Unknown")),
# Draw all plots (on slow machines, probably don't want to...)
checkboxInput(inputId = "all_plots",
label = strong("Draw 3-mer and 4-mer plots (slower...)"),
value = FALSE)
),
# Show plot of the mono-, di- and tri-nucleotide frequencies
# of the selected dataset in the main panel.
mainPanel(
plotOutput("freqPlot")
)
));
runApp('shiny/nucleotide_frequencies')
runApp("shiny/nucleotide_frequencies")
runApp("shiny/nucleotide_frequencies")
require(affy)
load("~/reload.RData")
library(ggplot2)
library(reshape2)
library(GEOquery)
library(affy)
library(affyPLM)
library(arrayQualityMetrics)
library(annotate)
library(hgu133plus2.db)
library(hgu133plus2probe)
library(genefilter)
library(limma)
.doFilter <- function(celRMA)
{
celfiles.filtered <- nsFilter(celRMA,
require.entrez=FALSE,
remove.dupEntrez=FALSE)
}
.doDE <- function(eset)
{
samples <- eset$targets
# check the results of this
# convert into factors
samples <- as.factor(samples)
# set up the experimental design
design <- model.matrix(~0 + samples)
colnames(design) <- c("choroid", "huvec", "iris", "retina")
# fit the linear model to the filtered expression set
fit <- lmFit(exprs(eset), design)
# set up a contrast matrix to compare tissues v cell line
contrast.matrix <- makeContrasts(huvec_choroid = huvec - choroid,
huvec_retina = huvec - retina,
huvec_iris <- huvec - iris,
levels=design)
# check the contrast matrix
contrast.matrix
# Now the contrast matrix is combined with the per-probeset linear model fit.
huvec_fits <- contrasts.fit(fit, contrast.matrix)
huvec_ebFit <- eBayes(huvec_fits)
# return the top 10 results for any given contrast
# coef=1 is huvec_choroid, coef=2 is huvec_retina
ttab <- topTable(huvec_ebFit, number=10000, coef=1)
nrow(topTable(huvec_ebFit, coef=1, number=10000, lfc=5))
nrow(topTable(huvec_ebFit, coef=1, number=10000, lfc=4))
nrow(topTable(huvec_ebFit, coef=1, number=10000, lfc=3))
nrow(topTable(huvec_ebFit, coef=1, number=10000, lfc=2))
# Get a list for probesets with a four fold change or more
tTable <- topTable(huvec_ebFit, coef=1, number=10000, lfc=4)
annotation <- as.data.frame(select(hgu133plus2.db,
rownames(tTable),
c("ENSEMBL","SYMBOL")))
colnames(annotation) <- c("probeId","ensemblId","geneSymbol")
results <- merge(annotation, tTable,by.x="probeId",by.y="row.names")
head(results)
write.table(results, "results.txt", sep="\t", quote=FALSE)
return(results)
}
if(!exists("celResults"))
{
celRAW <- .getData()
eset<-exprs(celRAW)
celGCRMA <- gcrma(celRAW)
celRMA <- rma(celRAW)
.ggboxIt(.summariseIt(log2(exprs(celRAW))),"sumRAW.pdf")
.ggboxIt(.summariseIt(exprs(celRMA)),"sumRMA.pdf")
.plotDensity(log2(exprs(celRAW)),"densityRAW.pdf")
.plotDensity(log2(exprs(celRMA)),"densityRMA.pdf")
celFilt <- .doFilter(celRMA)
celResults <- .doDE(celFilt$eset)
}
load("~/*.CEL")
setwd("~/BS32010/project/data")
load("~/*.CEL")
load("*.CEL")
getwd()
dir(pattern="*.CEL")
mydata<-ReadAffy()
mydata
library(affy)
library(hgu133plus2.db)
library(annotate)
load("*.CEL")
samples<-list.files(pattern="*.CEL")
filenames<-c("ROS1-_9.CEL", "ROS1+_10.CEL", "ROS2-_11.CEL", "ROS2+_12.CEL", "ROS3-_13.CEL", "ROS3+_14.CEL", "ROS4-_15.CEL", "ROS4+_16.CEL")
samplenames<-c("ROS1-_9", "ROS1+_10", "ROS2-_11", "ROS2+_12", "ROS3-_13", "ROS3+_14", "ROS4-_15", "ROS4+_16")
phenodata<-ad.data.frame(cbind(filenames, samplenames)
mydata<-ReadAffy(phenoData=phenodata)
library(affy)
library(hgu133plus2.db)
library(annotate)
load("*.CEL")
samples<-list.files(pattern="*.CEL")
filenames<-c("ROS1-_9.CEL", "ROS1+_10.CEL", "ROS2-_11.CEL", "ROS2+_12.CEL", "ROS3-_13.CEL", "ROS3+_14.CEL", "ROS4-_15.CEL", "ROS4+_16.CEL")
samplenames<-c("ROS1-_9", "ROS1+_10", "ROS2-_11", "ROS2+_12", "ROS3-_13", "ROS3+_14", "ROS4-_15", "ROS4+_16")
phenodata<-ad.data.frame(cbind(filenames, samplenames))
library(GEOquery)
phenodata<-ad.data.frame(cbind(filenames, samplenames))
phenodata<-as.data.frame(cbind(filenames, samplenames))
mydata<-ReadAffy(phenoData=phenodata)
sampleType<-mydata.processed$Target
plot(mydata)
mydata
phenoData(mydata)
plotMA(exprs(mydata)[,c(1,2)])
help(plot)
help(plotMA)
boxplot(exprs(mydata))
eset_rma<-rma(mydata)
